import java.io.*;
import java.net.*;

public class ServerThread {
    public static void main(String args[]) throws IOException {
        ServerSocket handshake = new ServerSocket(5000);
        System.out.println("Server connected at " + handshake.getLocalPort());
        System.out.println("Server is connecting\n");
        System.out.println("Wait for the client\n");
        while (true) {
            Socket com_socket = handshake.accept();
            System.out.println("A new client is connected " + com_socket);
            DataOutputStream dos = new DataOutputStream(com_socket.getOutputStream());
            DataInputStream dis = new DataInputStream(com_socket.getInputStream());
            System.out.println("A new thread is assigning");
            Thread new_tunnel = new ClientHandler(com_socket, dis, dos);
            new_tunnel.start();
        }
    }
}




import java.io.*;
import java.net.*;
import java.util.*;

public class ClientThread {
    public static void main(String args[]) throws IOException {
        try {
            Socket clientsocket = new Socket("localhost", 5000);
            System.out.println("Connected at server Handshaking port " + clientsocket.getPort());
            System.out.println("Client is connecting at Communication Port " + clientsocket.getLocalPort());
            System.out.println("Client is Connected");
            Scanner scn = new Scanner(System.in);
            DataOutputStream dos = new DataOutputStream(clientsocket.getOutputStream());
            DataInputStream dis = new DataInputStream(clientsocket.getInputStream());

            while (true) {
                String inLine = dis.readUTF();
                System.out.println(inLine);
                String outLine = scn.nextLine();
                dos.writeUTF(outLine);

                if (outLine.equals("Exit")) {
                    System.out.println("Closing the connection " + clientsocket);
                    clientsocket.close();
                    System.out.println("Connection Closed");
                    break;
                }
                String received = dis.readUTF();
                System.out.println(received);
            }
            dos.close();
            dis.close();
            clientsocket.close();
        } catch (Exception ex) {
            System.out.println(ex);
        }
    }
}






import java.io.*;
import java.net.*;
import java.text.DateFormat;
import java.text.SimpleDateFormat;
import java.util.*;
import java.util.logging.Level;
import java.util.logging.Logger;

class ClientHandler extends Thread {
    DateFormat fordate = new SimpleDateFormat("yyyy/MM/dd");
    DateFormat fortime = new SimpleDateFormat("hh:mm:ss");
    final Socket com_tunnel;
    final DataInputStream dis_tunnel;
    final DataOutputStream dos_tunnel;
    String received = "";
    String toreturn = "";

    public ClientHandler(Socket s, DataInputStream dis, DataOutputStream dos) {
        this.com_tunnel = s;
        this.dis_tunnel = dis;
        this.dos_tunnel = dos;
    }

    public void run() {
        while (true) {
            try {
                dos_tunnel.writeUTF("What do you want [Date/Time]");
                received = dis_tunnel.readUTF();
                if (received.equals("Exit")) {
                    System.out.println("Client " + this.com_tunnel + " sends exits");
                    System.out.println("Closing the connection");
                    this.com_tunnel.close();
                    break;
                    
                }

                Date date = new Date();
                switch (received) {

                    case "Date":
                        toreturn = fordate.format(date);
                        dos_tunnel.writeUTF(toreturn);
                        break;

                    case "Time":
                        toreturn = fortime.format(date);
                        dos_tunnel.writeUTF(toreturn);
                        break;

                    default:
                        dos_tunnel.writeUTF("Invalid input");
                        break;
                }

            } catch (IOException ex) {
                Logger.getLogger(ClientHandler.class.getName()).log(Level.SEVERE, null, ex);
            }
        }
        try {
            this.dos_tunnel.close();
            this.dis_tunnel.close();
        } catch (IOException ex) {
            Logger.getLogger(ClientHandler.class.getName()).log(Level.SEVERE, null, ex);
        }
    }
}





this code modify for following bellow

Mathematical operations are very useful to be implemented using TCP socket programming. Create two processes, a server and a client using JAVA codes. The client will send two separate integer values and a mathematical operator to the server. The server receives these integers and a mathematical operator, then performs a mathematical operation based on the user input. The server then sends this answer to the client, who then displays it. The client sends requests as many times as he wishes. However, The server can serve atmost 5 clients in its lifetime. The individual client ends its connection by saying “ENDS”. For example:
• If the client sends 10, 20, and Sum, the server sends 30 to the client.
• If the client sends 20, 5, and Subtract, the server sends 15 to the client.
• If the client sends 20, 5, and Multiplication, the server sends 100 to the client.
• If the client sends 20, 5, and Division, the server sends 4 to the client.
• If the client sends 16, 3, and Modules, the server sends 1 to the client. 
